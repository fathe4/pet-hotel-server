// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  role            Roles             @default(CUSTOMER)
  contactNo       String
  address         String
  profileImg      String
  hostel          Hostel[]
  ReviewAndRating ReviewAndRating[]
  Booking         Booking[]
  createdAt       DateTime          @default(now())
}

model Category {
  id    String @id @default(uuid())
  title String
  //   hostels Hostel[]
}

model Hostel {
  id            String            @id @default(uuid())
  title         String
  description   String
  ownerId       String
  owner         User              @relation(fields: [ownerId], references: [id])
  locationValue String
  capacity      Int
  totalBooked   Int               @default(0)
  price         Int               @default(0)
  petTypeId     String
  petType       PetType           @relation(fields: [petTypeId], references: [id])
  createdAt     DateTime          @default(now())
  imageSrc      String
  reviews       ReviewAndRating[]
  bookings      Booking[]
}

model PetType {
  id       String   @id @default(uuid())
  typeName String
  imgSrc   String
  Hostel   Hostel[]
}

// model PetTypeOnHostel {
//   id       String   @id @default(uuid())
//   hostelId String
//   petTypeId String
//   hostel   Hostel   @relation(fields: [hostelId], references: [id])
//   petType  PetType  @relation(fields: [petTypeId], references: [id])

//   @@unique([hostelId, petTypeId])
// }

model ReviewAndRating {
  id       String @id @default(uuid())
  review   String
  rating   Int    @default(0)
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  hostel   Hostel @relation(fields: [hostelId], references: [id])
  hostelId String
}

model Booking {
  id         String        @id @default(uuid())
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  hostel     Hostel        @relation(fields: [hostelId], references: [id])
  hostelId   String
  checkIn    DateTime
  checkOut   DateTime
  petCount   Int
  totalPrice Int
  status     BookingStatus @default(pending)
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum Roles {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}
